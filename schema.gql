# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type MovieOutput {
  movieName: String!
  userId: Float!
  description: String!
  directorName: String!
  releaseDate: String!
}

input Movies {
  movieName: String!
  description: String!
  directorName: String!
  releaseDate: String!
}

type Mutation {
  registerUser(data: Users!): Boolean!
  loginUser(password: String!, email: String!): String!
  changePassword(newPassword: String!, oldPassword: String!): Boolean!
  createMovie(data: Movies!): Boolean!
  updateMovie(data: UpdateMovies!): Boolean!
  deleteMovie(id: Int!): Boolean!
  createReview(data: Reviews!): Boolean!
  deleteReview(id: Int!): Boolean!
  updateReview(data: UpdateReviews!): Boolean!
}

type PaginatedMovies {
  movies: [MovieOutput!]!
  totalCount: Float!
  hasMore: Boolean!
}

type PaginatedReview {
  reviews: [ReviewOutput!]!
  totalCount: Float!
  hasMore: Boolean!
}

type Query {
  getMovies(searchTerm: String, sortOrder: String = "asc", sortBy: String = "movieName", size: Int = 10, page: Int = 1): PaginatedMovies!
  movie(id: Int!): MovieOutput!
  hello: String!
  reviewsByMovieId(size: Int = 10, page: Int = 1, movieId: Int!): PaginatedReview!
}

type ReviewOutput {
  id: Int!
  movieId: Float!
  rating: Float!
  comment: String!
}

input Reviews {
  movieId: Float!
  rating: Float!
  comment: String!
}

input UpdateMovies {
  id: Int!
  movieName: String
  description: String
  directorName: String
  releaseDate: String
}

input UpdateReviews {
  id: Int!
  rating: Float
  comment: String
}

input Users {
  userName: String!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}
